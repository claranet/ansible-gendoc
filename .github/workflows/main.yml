name: Tests and Scan

on:
  pull_request: {}
  push:
    branches-ignore:
      - master
jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} ${{ matrix.suffix }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu, macOS]
        python-version: ["3.10"]
        include:
          - os: Ubuntu
            image: ubuntu-latest
          - os: macOS
            image: macos-11
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y ${{ matrix.bootstrap-args }}

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install
  scan:
    needs: tests
    name: scan vulnerabilities
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Install grype
        run: curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Scan repository
        run: grype dir:./
